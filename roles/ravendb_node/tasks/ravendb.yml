- name: Message
  debug:
    msg: "Installing RavenDB {{ ravendb_version }}..."

- block:
  - name: Determine download url for latest version
    set_fact:
      ravendb_download_url: "https://hibernatingrhinos.com/downloads/RavenDB%20for%20Linux%20x64/latest?buildType={{ ravendb_release_channel }}&version={{ ravendb_version_minor }}"
    when: ravendb_version == "latest"

  - name: Determine download url for exact version
    set_fact:
      ravendb_download_url: "https://daily-builds.s3.amazonaws.com/RavenDB-{{ ravendb_version }}-{{ ravendb_arch }}.tar.bz2"
    when: ravendb_version != "latest"

  - name: Remove RavenDB previous download
    ansible.builtin.file:
      path: /tmp/ravendb.tar.bz2
      state: absent

  - name: Download RavenDB server binaries
    ansible.builtin.get_url:
        url: "{{ ravendb_download_url }}"
        dest: /tmp/ravendb.tar.bz2
  tags: download


- name: Populate service facts
  service_facts:
  tags: service_mgmt

- name: Stop RavenDB service
  become: true
  service:
    name: ravendb
    enabled: yes
    state: stopped
  when: "'ravendb.service' in services"  
  tags: service_mgmt
  
- name: Set vm.swappiness
  sysctl:
    name: vm.swappiness
    value: '5'
    state: present
  when: molecule is not defined
  tags: config

- name: Create ravendb group
  become: yes
  ansible.builtin.group:
    name: ravendb
    state: present
  tags: user,service_mgmt

- name: Create ravendb user
  become: yes
  ansible.builtin.user:
    name: ravendb
    state: present
    comment: RavenDB Server user
    groups: ravendb
    append: yes
  tags: user,service_mgmt

- name: Prepare directory structure
  become: yes
  file:
    path: "{{ item }}"
    owner: root
    group: ravendb
    mode: u=rX,g=rX
    state: directory
  loop:
    - "/usr/lib/ravendb/server"
    - "/usr/lib/ravendb/server/libmscordaccore"
    - "/var/lib/ravendb"
    - "/etc/ravendb"
    - "/etc/ravendb/security"

- name: Prepare directory structure
  become: yes
  file:
    path: "{{ item }}"
    owner: ravendb
    group: ravendb
    mode: '0770' # TODO security, fix permissions to be like in DEB
    state: directory
  loop:
    - "/var/lib/ravendb/nuget"
    - "/var/lib/ravendb/data"
    - "/var/log/ravendb/audit"
    - "/var/log/ravendb/logs"

- name: Determine current RavenDB version
  become: yes
  command: >
    /usr/lib/ravendb/server/Raven.Server --version
  register: ravendb_existing_version_result
  when: "'ravendb.service' in services"  
  tags: binaries

- name: Determine whether that's an update or a new deployment
  set_fact:
    ravendb_should_update_binaries: >
      (ravendb_existing_version_result is not defined) 
      or (not ravendb_existing_version_result.skipped 
          and ravendb_existing_version_result.stdout != ravendb_version) 
  tags: binaries

- name: Unpack RavenDB server binaries
  become: yes
  ansible.builtin.unarchive:
    remote_src: yes
    src: /tmp/ravendb.tar.bz2
    dest: /usr/lib/ravendb/server
    extra_opts:
        - --transform
        - s/^RavenDB\/Server//
  when: ravendb_should_update_binaries
  tags: binaries

- block:

  - name: Determine settings.json template
    set_fact:
      ravendb_settings_json_j2: "settings.{{ ravendb_settings_preset }}.json.j2" 

  - name: Template settings.json preset out 
    become: yes
    ansible.builtin.template:
      src: "{{ ravendb_settings_json_j2 }}"
      dest: /tmp/ravendb_settings.json
      mode: 0700

  - name: Settings override to temp file
    become: yes
    ansible.builtin.copy:
      content: "{{ ravendb_settings_override | to_json }}"
      dest: /tmp/ravendb_settings_override.json
      mode: 0700
    when: ravendb_settings_override.keys() | length > 0

  - name: Apply settings overrides
    become: yes
    command: >
      bash -c "jq -S -s '.[0] + .[1]' /tmp/ravendb_settings.json /tmp/ravendb_settings_override.json > /etc/ravendb/settings.json"
    when: ravendb_settings_override.keys() | length > 0

  - name: Adjust permissions for settings file
    become: yes
    ansible.builtin.file:
      dest: /etc/ravendb/settings.json
      owner: root
      group: ravendb
      mode: '0640'
    when: ravendb_settings_override.keys() | length > 0

  - name: Copy settings file
    become: yes
    ansible.builtin.copy:
      remote_src: "/tmp/ravendb_settings.json"
      dest: /etc/ravendb/settings.json
      owner: root
      group: ravendb
      mode: '0640'
    when: ravendb_settings_override.keys() | length == 0

  - name: Copy license file
    become: yes
    ansible.builtin.copy:
      src: "{{ ravendb_license_file }}"
      dest: /etc/ravendb/license.json
      owner: root 
      group: ravendb
      mode: '0640'
    when: ravendb_license_file | default('', true) | length > 0

  - name: Copy RavenDB server certificate file
    become: yes
    ansible.builtin.copy:
      src: "{{ ravendb_certificate_file }}"
      dest: /etc/ravendb/security/certificate.pfx
      owner: ravendb # server needs to be able to renew the cert in some scenarios 
      group: ravendb
      mode: '0640'
    when: ravendb_certificate_file | default('', true) | length > 0

  - name: Clear default settings json
    ansible.builtin.copy:
      content: '{}'
      dest: "/usr/lib/ravendb/server/settings.default.json"
      force: yes
      owner: root
      group: ravendb
      mode: '0644'
    when: ravendb_should_update_binaries

  tags: config,ravendb_settings

- name: Set ravendb_arch_so
  set_fact:
    ravendb_arch_so: "{{ ravendb_arch | regex_replace('-', '.') }}"
  tags: binaries

- name: Copy arch specific files
  ansible.builtin.copy:
    remote_src: yes
    src: "/usr/lib/ravendb/server/{{ item }}.{{ ravendb_arch_so }}.so"
    dest: "/usr/lib/ravendb/server/{{ item }}.so"
    owner: root
    group: ravendb
    mode: '0644'
  loop:
    - librvnpal
    - libsodium
    - libzstd
  when: 
    - ravendb_should_update_binaries
    - ravendb_version is regex('^4\.') and item != 'libzstd'
  tags: binaries

- name: Remove redundant sos
  become: yes
  ansible.builtin.shell: find . -maxdepth 1 -type f -name "{{ item }}.*.so" ! -iname "*.{{ ravendb_arch_so }}.so" -exec rm -v {} \;
  changed_when: true
  loop:
    - librvnpal
    - libsodium
    - libzstd
  when: ravendb_should_update_binaries
  tags: binaries

- name: Adjust binaries permissions
  become: yes
  ansible.builtin.file:
    dest: /usr/lib/ravendb/server
    owner: root
    group: ravendb
    mode: '0644'
    recurse: yes
  tags: binaries

- name: Adjust executables permissions
  ansible.builtin.file:
    name: "{{ item }}"
    owner: root
    group: ravendb
    mode: u=rx,g=rx
  loop:
    - "usr/lib/ravendb/server/Raven.Server"
    - "usr/lib/ravendb/server/rvn"
    - "usr/lib/ravendb/server/Raven.Debug"
    - "usr/lib/ravendb/server/createdump"
  tags: binaries

- name: Adjust directories permissions
  file:
    path: /usr/lib/ravendb
    owner: root
    group: ravendb
    mode: u=rX,g=rX
    recurse: yes

- name: Check OS uses capabilities 
  stat:
    path: /usr/sbin/getcap
  register: getcap_stat
  tags: binaries

- name: Set capabilities
  community.general.capabilities:
    path: /usr/lib/ravendb/server/Raven.Server 
    capability: CAP_NET_BIND_SERVICE=+eip 
    state: present
  when: getcap_stat.stat.exists
  tags: binaries

- name: Template ravendb.service out 
  become: yes
  ansible.builtin.template:
    src: ravendb.service.j2
    dest: /etc/systemd/system/ravendb.service
    owner: root
    group: root
    mode: '0640'
  tags: config,service_mgmt

- name: Restart RavenDB service
  become: true
  ansible.builtin.systemd:
    name: ravendb.service
    enabled: yes
    daemon_reload: yes
    state: restarted
  tags: config,service_mgmt
